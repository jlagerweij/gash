apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'oneJar'
apply from: "https://launchpad.net/gradle-release/trunk/latest/+download/apply.groovy"

ext {
    sourceCompatibility = JavaVersion.VERSION_1_6   /* define the valid syntax level for source files */
    targetCompatibility = JavaVersion.VERSION_1_6   /* define binary compatiblity version */
}

configurations.compile.transitive = true

// http://cloud.github.com/downloads/curious-attempt-bunny/gradle-onejar/gradle-onejar-0.1-SNAPSHOT.jar
buildscript {
    repositories {
        maven {
            url uri('lib')
        }
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
     			name = 'GitHub'
     			addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
     		}
    }
}

buildscript {
	dependencies {
		classpath 'curious-attempt-bunny:gradle-onejar:0.1-SNAPSHOT'
	}
}
repositories {
    mavenCentral()
    mavenRepo url: "lib"
}
dependencies {
    compile("com.gigaspaces:gs-openspaces:8.0.6") {
        exclude(module: 'openjpa-all')
    }
    compile "jline:jline:1.0"
}

task oneJar(type: OneJar) {
	mainClass = 'net.lagerwey.gash.Gash'
}
oneJar.dependsOn jar

artifacts {
    archives oneJar
}

task uploadToGoogle(type: UploadToGoogle) {
    archive = file("target/mockito-${version}.zip")
    projectname = 'gash'
    summary = "Gash version ${version}"
}
class UploadToGoogle extends DefaultTask {

    @InputFile File archive

    void assertUploadPossible() {
        def googleUser = project.hasProperty('googleUser')
        def googlePwd = project.hasProperty('googlePwd')

        assert googleUser && googlePwd : """Google upload not possible - googleUser or googlePwd property not provided.
Pass -PgoogleUser=someone -PgooglePwd=secret via command line"""

        assert archive.exists() : "" +
                "Google upload not possible - no binaries to upload. Please run 'gradlew build' first."
    }

    @TaskAction
    void upload() {
        project.ant {
            //declare ant task
            taskdef(name:"gcupload", classname:"net.bluecow.googlecode.ant.GoogleCodeUploadTask") {
                classpath {
                    fileset(dir: 'lib/build', includes: 'ant-googlecode-*.jar')
                }
            }

            //acquire the user/password (usually supplied via command line)
            def googleUser = project.getProperty('googleUser')
            def googlePwd  = project.getProperty('googlePwd')

            //upload zip
            logger.lifecycle "Uploading $archive ..."

            gcupload username:googleUser, password:googlePwd, projectname:projectname,
                filename:archive, targetfilename:archive.name, summary:summary,
                labels:"Featured"
        }
    }
}
