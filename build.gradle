apply plugin: 'java'
apply from: "https://launchpad.net/gradle-release/trunk/latest/+download/apply.groovy"

ext {
    sourceCompatibility = JavaVersion.VERSION_1_6   /* define the valid syntax level for source files */
    targetCompatibility = JavaVersion.VERSION_1_6   /* define binary compatiblity version */
}

configurations.compile.transitive = true

// http://cloud.github.com/downloads/curious-attempt-bunny/gradle-onejar/gradle-onejar-0.1-SNAPSHOT.jar
buildscript {
    repositories {
        maven {
            url uri('lib')
        }
    }
}
repositories {
    mavenCentral()
    mavenRepo url: "lib"
}
configurations {
    provided
    onejar
    googlecode
}
dependencies {
    compile("com.gigaspaces:gs-openspaces:8.0.6") {
        exclude(module: 'openjpa-all')
    }
    compile "jline:jline:1.0"
    onejar 'com.simontuffs:one-jar-ant-task:0.97'
    googlecode 'ant-googlecode:ant-googlecode:0.0.3'
}

jar { 
    manifest { 
        attributes 'Main-Class': 'net.lagerwey.gash.Gash' 
    } 
} 

task oneJar { 
    ext.destFile = file("${jar.destinationDir.path}/${project.archivesBaseName}-onejar-${version}.jar")
    dependsOn jar 
    inputs.file file("${jar.destinationDir.path}/${project.archivesBaseName}-${version}.jar")
    outputs.file destFile
    doLast { 
        ant.taskdef(name: "onejar", classname: "com.simontuffs.onejar.ant.OneJarTask", classpath: configurations.onejar.asPath, onerror: "report") 
        ant.onejar(destfile: destFile) { 
            ant.main(jar: project.tasks.jar.archivePath) 
            ant.lib() { 
            configurations.runtime.findAll { !configurations.provided.contains(it) }.each { f -> 
                ant.fileset(file: f.path) 
            } 
            } 
        } 
    } 
} 

createReleaseTag.dependsOn uploadArchives

uploadArchives {
    dependsOn oneJar
    ext.archive = file("build/libs/gash-onejar-${version}.jar")
    ext.projectname = 'gash'
    ext.summary = "Gash version ${version}"
    
    doLast {
        //acquire the user/password (usually supplied via command line)
        def googleUser = project.getProperty('googleUser')
        def googlePwd  = project.getProperty('googlePwd')

        assert googleUser && googlePwd : """Google upload not possible - googleUser or googlePwd property not provided.
        Pass -PgoogleUser=someone -PgooglePwd=secret via command line"""

        println summary
        assert archive.exists() : "" +
                "Google upload not possible - no binaries to upload. Please run 'gradlew build' first."

        logger.lifecycle "Uploading $archive ..."
        ant.taskdef(name:"gcupload", classname:"net.bluecow.googlecode.ant.GoogleCodeUploadTask", classpath: project.configurations.googlecode.asPath)
        ant.gcupload username:googleUser, password:googlePwd, projectname:projectname,
                filename:archive, targetfilename:archive.name, summary:summary,
                labels:"Featured"
    }
}
